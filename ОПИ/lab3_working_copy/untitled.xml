<project name="lab3" default="build">

    <!-- Определение свойств -->
    <!-- !!!Вынести в файл!!! -->
    <property name="src.dir" value="src/main/java"/>
    <property name="build.dir" value="build/classes"/>
    <property name="output.dir" value="dist"/>
    <!-- для alt -->
    <property name="alt.regex" value="oldName"/>
    <property name="alt.regex.flags" value=""/>
    <property name="alt.replace" value="newName"/>
    <!-- для diff -->
    <property name="svn.url" value="http://your.svn.repo/path"/>
    <property name="ignore.classes.file" value="ignoreClasses.txt"/>

    <property name="zip.output.file" value="teamBuilds.zip"/>
    <property name="git.repo" value="https://github.com/your/repo.git"/>
    <property name="builds.dir" value="builds"/>


    <!-- 1: компиляция исходного кода -->
    <target name="compile">
        <mkdir dir="${build.dir}"/>
        <javac srcdir="${src.dir}" destdir="${build.dir}" includeAntRuntime="false"/>
    </target>


    <!-- 2: сборка проекта -->
    <target name="build" depends="compile">
        <jar destfile="${output.dir}/lab3-${DSTAMP}.jar" basedir="${build.dir}">
            <manifest>
                <attribute name="Main-Class" value="ru.meldren.weblab3.Main"/>
            </manifest>
        </jar>
    </target>


    <!-- 4: test -->
    <target name="test">
        <junit printsummary="yes" haltonfailure="no">
            <classpath>
                <pathelement location="lib/junit-4.13.2.jar"/>
                <pathelement location="lib/hamcrest-core-1.3.jar"/>
            </classpath>
            <formatter type="plain"/>
            <formatter type="xml" tofile="${test.results.dir}/${test.report.file}"/>
            <test name="com.example.MyTestClass"/>
        </junit>
    </target>


    <!-- 9: музыка после сборки -->
    <target name="music" depends="build">
        <sound>
            <success source="sounds/goblin.wav"/>
            <fail source="sounds/laugh.wav" loops="2"/>
        </sound>
    </target>


    <!-- 10: alt создаёт альтернативную версию программы-->
    <target name="alt"
            description="Создание версии программы с измененными именами переменных и классов по указанному регулярному выражению">
        <tempfile property="temp.dir" destdir="${java.io.tmpdir}" prefix="ant"/>
        <copy todir="${temp.dir}">
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </copy>

        <replaceregexp match="${alt.regex}"
                       flags="${alt.regex.flags}"
                       replace="${alt.replace}">
            <fileset dir="${temp.dir}" includes="**/*.java"/>
        </replaceregexp>

        <antcall target="build">
            <param name="srcdir" value="${temp.dir}"/>
            <param name="jar" value="${output.dir}/${ant.project.name}-Alt-${DSTAMP}.jar"/>
        </antcall>
    </target>


    <!-- 11: diff -->
    <target name="diff"
            description="Совершение коммита в репозиторий svn, если изменения не касаются указанных классов">
        <echo>Получение списка измененных файлов...</echo>
        <svn-status outputproperty="diff.status"/>
        <echo>Поиск изменений в указанных классах...</echo>
        <for param="class" list="${diff.classes}" delimiter=" ">
            <sequential>
                <condition property="commit">
                    <not>
                        <contains string="${diff.status}"
                                  substring="@{class}.java"/>
                    </not>
                </condition>
            </sequential>
        </for>
        <if>
            <isset property="commit"/>
            <then>
                <echo>Изменения не были найдены: выполнение коммита...</echo>
                <svn-commit/>
            </then>
            <else>
                <echo>Изменения были найдены: завершение...</echo>
            </else>
        </if>
    </target>


    <!-- 12: report -->
    <target name="report" depends="test">
        <copy file="${test.results.dir}/${test.report.file}" todir="${svn.url}"/>


        <exec executable="svn" failonerror="true">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Adding JUnit test report"/>
        </exec>
    </target>


    <!-- 13: history -->
    <target name="history" depends="compile">
        <condition property="previousRevisionLoaded">
            <not>
                <success/>
            </not>
        </condition>

        <if condition="${previousRevisionLoaded}">
            <exec executable="git" failonerror="true">
                <arg value="checkout"/>
                <arg value="HEAD~1"/>
            </exec>
        </if>

        <trycatch property="buildFailed">
            <try>
                <target name="compile"/>
            </try>
            <catch>
                <echo message="Compilation failed, trying to load previous revision..."/>
            </catch>
        </trycatch>

        <if condition="${buildFailed}">
            <exec executable="git" failonerror="true">
                <arg value="checkout"/>
                <arg value="HEAD~1"/>
            </exec>
        </if>

        <if condition="${buildFailed}">
            <exec executable="git" failonerror="true">
                <arg value="checkout"/>
                <arg value="HEAD"/>
            </exec>
            <exec executable="git" failonerror="true">
                <arg value="diff"/>
                <arg value="--name-only"/>
                <arg value="HEAD~1..HEAD"/>
                <redirector>
                    <outputfile file="${diff.output.file}"/>
                </redirector>
            </exec>
        </if>
    </target>


    <!-- 14: team -->
    <target name="team" depends="build">
        <mkdir dir="${builds.dir}"/>

        <for list="${revs=1..4}" target="buildAndZip" param="rev">
            <exec executable="git" failonerror="true">
                <arg value="checkout"/>
                <arg value="HEAD~${rev}"/>
            </exec>
            <exec executable="cp" failonerror="true">
                <arg value="-r"/>
                <arg value="${build.dir}"/>
                <arg value="${builds.dir}/rev${rev}"/>
            </exec>
            <exec executable="cp" failonerror="true">
                <arg value="-r"/>
                <arg value="${output.dir}"/>
                <arg value="${builds.dir}/rev${rev}"/>
            </exec>
        </for>

        <!-- Упаковка получившихся jar-файлов в zip-архив -->
        <zip destfile="${zip.output.file}">
            <fileset dir="${builds.dir}"/>
        </zip>
    </target>


    <!-- 15: env -->
    <target name="env" depends="build">
        <echo message="--- Executing: java ${params} -jar ${dest.jar} ---"/>
        <exec executable="cmd">
            <arg value="/c"/>
            <arg value="java ${params} -jar ${dest.jar}"/>
        </exec>
    </target>

</project>
